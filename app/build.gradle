plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
    id 'jacoco'
    id 'com.github.kt3k.coveralls'
}

tasks.coveralls {
    onlyIf { System.getenv("COVERALLS_REPO_TOKEN") }
}

androidExtensions {
    experimental = true
}

project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }
}

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.example.playwithcircleci2"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            multiDexEnabled true
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    lintOptions {
        lintConfig file("lint.xml")
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:gridlayout-v7:27.1.1'

    // dagger
    implementation 'com.google.dagger:dagger-android:2.15'
    kapt 'com.google.dagger:dagger-compiler:2.15'

    // Retrofit 2
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'

    // Rxjava 2
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'

    //Glide
    implementation 'com.github.bumptech.glide:glide:4.7.1'

    // MP Chart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'

    //Hockey app
    implementation 'net.hockeyapp.android:HockeySDK:5.1.0'

    // test
    testImplementation 'junit:junit:4.12'
    debugImplementation 'org.mockito:mockito-core:2.18.3'
    testImplementation "org.robolectric:robolectric:3.8"
    testImplementation "org.robolectric:shadows-support-v4:3.4-rc2"

    // android test
    androidTestImplementation 'org.mockito:mockito-core:2.18.3'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'org.mockito:mockito-android:2.18.3'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:3.0.2') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }

    implementation 'com.google.firebase:firebase-core:16.0.0'
}


jacoco {
    toolVersion "0.8.1"
}

task jacocoTestReport(type: JacocoReport) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      '**/entity/**',
                      '**/mock/**',
                      '**/*MembersInjector*.*']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/classes/debug",
            excludes: fileFilter)
    def debugTreeKotlin = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree, debugTreeKotlin])
    executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])
}

apply plugin: 'com.google.gms.google-services'